{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "MongoDB Primary Node 20140521-01",

    "Parameters" : {
        "ServerName" : {
            "Description" :"Name of this server",
            "Default": "MongoPrimary",
            "Type" : "String"
        },

        "KeyName" : {
            "Description" :"Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String"
        },

        "InstanceType" : {
            "Type" : "String",
            "Default" : "m3.xlarge",
            "AllowedValues" : [ "m3.large", "m3.xlarge", "m3.xlarge", "m3.2xlarge", "m3.4xlarge", "c1.xlarge", "cc1.4xlarge" ],
            "Description" : "EC2 instance type (e.g. m3.large, m3.xlarge, m3.xlarge)"
        },

        "VolumeSize" : {
            "Description" : "Volume size for each EBS volume",
            "Type" : "Number",
            "MinValue" : "1",
            "MaxValue" : "1000",
            "Default" : "10"
        },

        "VolumeType" : {
            "Description" : "EBS Volume type (Standard or Provisioned)",
            "AllowedValues": ["Standard","Provisioned"],
            "Type" : "String",
            "Default" : "Provisioned"
        },

        "IopsPerVolume" : {
            "Description" : "Provisioned IOps Per Volume EBS volume (100-2000) (ignored for standard volumes)",
            "Type" : "Number",
            "MinValue" : "100",
            "MaxValue" : "2000",
            "Default" : "200"
        },

        "ReplicaSetName" : {
            "Description" : "Name of the MongoDB replica set",
            "Type" : "String"
        },

        "SecurityGroupId" : {
            "Description" : "MongoDB security group id (sg-3d31fc58)",
            "Type" : "String",
            "Default" : "sg-3d31fc58"
        },

        "ReplicaSetMember1" : {
            "Description" : "MongoDB replica set replica 1",
            "Type" : "String"
        },

        "ReplicaSetMember2" : {
            "Description" : "MongoDB replica set replica 2",
            "Type" : "String"
        },

        "InstanceZone" : {
            "Description" : "AvailabilityZone for this instance",
            "Default" : "us-west-2c",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "VolumeTypeKeys" : {
            "Standard":     { "Key": "standard"},
            "Provisioned":  { "Key": "io1"}
        },
        "InstanceTypeArch" : {
            "m3.large"    : { "Arch" : "64" },
            "m3.xlarge"   : { "Arch" : "64" },
            "m3.2xlarge"  : { "Arch" : "64" },
            "c3.large"    : { "Arch" : "64" },
            "c3.xlarge"   : { "Arch" : "64" },
            "c3.2xlarge"  : { "Arch" : "64" },
            "c3.4xlarge"  : { "Arch" : "64" },
            "c3.8xlarge"  : { "Arch" : "64" },
            "r3.large"    : { "Arch" : "64HVM" },
            "r3.xlarge"   : { "Arch" : "64HVM" },
            "r3.2xlarge"  : { "Arch" : "64HVM" },
            "r3.4xlarge"  : { "Arch" : "64HVM" },
            "r3.8xlarge"  : { "Arch" : "64HVM" },
            "i2.large"    : { "Arch" : "64HVM" },
            "i2.xlarge"   : { "Arch" : "64HVM" },
            "i2.2xlarge"  : { "Arch" : "64HVM" },
            "i2.4xlarge"  : { "Arch" : "64HVM" },
            "i2.8xlarge"  : { "Arch" : "64HVM" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"     : { "64" : "ami-fb8e9292", "64HVM" : "ami-978d91fe" },
            "us-west-2"     : { "64" : "ami-043a5034", "64HVM" : "ami-383a5008" },
            "us-west-1"     : { "64" : "ami-7aba833f", "64HVM" : "ami-5aba831f" },
            "eu-west-1"     : { "64" : "ami-2918e35e", "64HVM" : "ami-4b18e33c" },
            "ap-southeast-1": { "64" : "ami-b40d5ee6", "64HVM" : "ami-860d5ed4" },
            "ap-southeast-2": { "64" : "ami-c9562fc8", "64HVM" : "ami-bb562fba" },
            "ap-northeast-1": { "64" : "ami-3b4bd301", "64HVM" : "ami-cf4ad2f5" },
            "sa-east-1"     : { "64" : "ami-215dff3c", "64HVM" : "ami-635dff7e" }
        },

        "RegionZone" : {
            "us-east-1"     : {"AZ1" : "us-east-1a", "AZ2" : "us-east-1b", "AZ3" : "us-east-1b", "AZ4" : "us-east-1d", "AZ5" : "us-east-1e"},
            "us-west-1"     : {"AZ1" : "us-west-1a", "AZ2" : "us-west-1b", "AZ3" : "us-west-1c"},
            "us-west-2"     : {"AZ1" : "us-west-2a", "AZ2" : "us-west-2b"},
            "eu-west-1"     : {"AZ1" : "eu-west-1a", "AZ2" : "eu-west-1b", "AZ3" : "eu-west-1c"},
            "ap-southeast-1": {"AZ1" : "ap-southeast-1a", "AZ2" : "ap-southeast-1b"},
            "ap-southeast-2": {"AZ1" : "ap-southeast-2a", "AZ2" : "ap-southeast-2b"},
            "ap-northeast-1": {"AZ1" : "ap-northeast-1a", "AZ2" : "ap-northeast-1b"},
            "sa-east-1"     : {"AZ1" : "sa-east-1a", "AZ2" : "sa-east-1b"}
        }
    },

    "Resources" : {
        "CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement": [ {
                        "Effect":"Allow",
                        "Action":"cloudformation:DescribeStackResource",
                        "Resource":"*"
                    } ] }
                } ]
            }
        },

        "AccessKey" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "CfnUser" }
            }
        },


        "ReplicaSetPrimary1" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "mdadm" : [],
                                "sysstat" : [],
                                "xfsprogs" : [],
                                "ntp" : []
                            }
                        },
                        "files" : {
                            "/etc/yum.repos.d/mongodb.repo" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[mongodb]\n",
                                    "name=MongoDB Repository\n",
                                    "baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64\n",
                                    "gpgcheck=0\n",
                                    "enabled=1\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/rc.local" : {
                               "content" : { "Fn::Join" : ["", [
                                    "#!/bin/sh\n",
                                    "#\n",
                                    "# This script will be executed *after* all the other init scripts.\n",
                                    "# You can put your own initialization stuff in here if you don't\n",
                                    "# want to do the full Sys V style init stuff.\n",
                                    "# \n",
                                    "# See http://docs.mongodb.org/manual/faq/diagnostics/#does-tcp-keepalive-time-affect-sharded-clusters-and-replica-sets\n",
                                    "echo 300 > /proc/sys/net/ipv4/tcp_keepalive_time\n",
                                    "touch /var/lock/subsys/local\n"
                               ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                             },
                            "/etc/mongod.conf" : {
                               "content" : { "Fn::Join" : ["", [
                                    "# mongod.conf\n",
                                    "dbpath=/var/lib/mongo\n",
                                    "logpath=/var/log/mongodb/mongod.log\n",
                                    "pidfilepath=/var/run/mongodb/mongod.pid\n",
                                    "logappend=true\n",
                                    "fork=true\n",
                                    "cpu=true\n",
                                    "replSet=", {"Ref" : "ReplicaSetName"}, "\n"
                               ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services" : {
                                "sysvinit" : {
                                     "ntpd"    : { "enabled" : "true", "ensureRunning" : "true" }
                                 }
                          }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroupIds" : [ { "Ref" : "SecurityGroupId" } ],
                "ImageId" : { 
                    "Fn::FindInMap" : [
                         "RegionImageZone", { "Ref" : "AWS::Region" },
                        {
                            "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ]
                        }
                    ]
                },
                "Tags" : [
                    { "Key" : "Name", "Value" : { "Ref": "ServerName" } },
                    { "Key" : "Type", "Value" : "MongoServer" },
                    { "Key" : "Role", "Value" : "MongoPrimary" }
                ],
                "SecurityGroupIds" : [ { "Ref" : "SecurityGroupId" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "AvailabilityZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ1"] },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "# Sending all output to /tmp/install.log\n",
                "exec 2> /tmp/install.log\n",
                "exec >> /tmp/install.log\n",
                "# CloudFormation: Updating scripts\n",
                "#\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Error reporting helper function\n",
                "function error_exit\n",
                "{\n",
                "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleP1" }, "'\n",
                "exit 1\n",
                "}\n",
                "# CloudFormation: Initialize\n",
                "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r ReplicaSetPrimary1",
                "   --access-key ",  { "Ref" : "AccessKey" },
                "   --secret-key ", { "Fn::GetAtt": ["AccessKey", "SecretAccessKey"] },
                "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",
                "# CLNGS UserData Start\n",
                "#\n",
                "RAIDMEMBERS=10\n",
                "# Wait until ALL EBS are connected\n",
                "while [ \"$(ls /dev/sdh*|wc -l)\" -lt \"$RAIDMEMBERS\" ]; do sleep 1; done\n",
                "#\n",
                "# LVM Creation\n",
                "#\n",
                "#\n",
                "# if all devices are ready then\n",
                "EBS=($(ls /dev/sdh*))\n",
                "if [ ${#EBS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired EBSs ${#EBS[@]} Vs Ready $RAIDMEMBERS : Proceeding...\"; pvcreate ${EBS[@]}; else exit; fi\n",
                "# if all PVs are ready then\n",
                "PVS=($(pvscan | head -n -1 |awk '{print $2}'))\n",
                "if [ ${#PVS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired PVs ${#PVS[@]} Vs Ready $RAIDMEMBERS : Proceeding...\"; vgcreate vg0 ${PVS[@]}; else exit; fi\n",
                "#\n",
                "lvcreate -i 10 -I 256 -n mongo -l 100%FREE vg0\n",
                "#\n",
                "# Tuning read-ahead=ON\n",
                "#\n",
                "blockdev -v --setra 128 ${EBS[@]}\n",
                "blockdev --setra 256 /dev/vg0/mongo\n",
                "#\n",
                "# Create MongoDB filesystem\n",
                "#\n",
                "mkfs.xfs -f -L mongo /dev/vg0/mongo\n",
                "mkdir -p /var/lib/mongo\n",
                "#\n",
                "# Update /etc/fstab\n",
                "#\n",
                "cat << END >> /etc/fstab\n",
                "/dev/vg0/mongo  /var/lib/mongo  xfs   noatime,nodiratime,logbufs=8,nodev,noexec   0 0\n",
                "END\n",
                "#\n",
                "# Mounting all new resources\n",
                "#\n",
                "mount -av\n",
                "#\n",
                "# Minimum performance tuning: Set limits for mongod user\n",
                "#\n",
                "cat << END > /etc/security/limits.conf\n",
                "mongod  soft  nofile  64000\n",
                "mongod  soft  nproc 32000\n",
                "mongos  soft  nofile  64000\n",
                "mongos  soft  nproc 32000\n",
                "END\n",
                "#\n",
                "# Updating RPMs and Installing MongoDB\n",
                "#\n",
                "yum update -y\n",
                "yum install mongodb-org -y\n",
                "#\n",
                "#\n",
                "# Fixing mongod permission on /var/lib/mongo\n",
                "#\n",
                "chown -Rv mongod:mongod /var/lib/mongo\n",
                "#\n",
                "# Updating system config and starting MongoDB\n",
                "#\n",
                "chkconfig mongod on\n",
                "service mongod start\n",
                "#\n",
                "# Waiting until MongoDB is UP and Running...\n",
                "# Workaround to avoid comparison and therefor using parentheses in sentence\n",
                "while [ -z $(echo \"db.serverStatus()\" | mongo 127.0.0.1/test 2>&1 | awk ' /uptimeMillis/ { print $3}') ]; do echo -e \"Waiting to connect to mongod\n\"; sleep 10; done\n",
                "# Create replica set configuration on the PRIMARY\n",
                "/usr/bin/curl -s --fail http://169.254.169.254/latest/meta-data/public-hostname ; VPC=$? \n",
                "if [ \"$VPC\" -eq \"0\" ]; then MASTER=$(wget -O- -q http://169.254.169.254/latest/meta-data/public-hostname) \n",
                "# Since in Default VPC we do not have PublicHostName we use EC2 Internal IPV4 for PRIMARY to avoid rs.initiate() issues with EC2 Public IPV4.\n",
                "else MASTER=$(wget -O- -q http://169.254.169.254/latest/meta-data/local-ipv4); fi  \n",
                "cat <<EOF > /tmp/replicaSetConfigInit.js\n",
                "config = {_id: \"", { "Ref" : "ReplicaSetName" } ,"\", members : [",
                    "{_id : 0, host:\"$MASTER:27017\"},",
                    "{_id : 1, host:\"", { "Ref" : "ReplicaSetMember1" },":27017\"},",
                    "{_id : 2, host:\"", { "Ref" : "ReplicaSetMember2" },":27017\"}",
                "]};\n",
                "rs.initiate(config);\n",
                "EOF\n",
                "/usr/bin/mongo /tmp/replicaSetConfigInit.js > /tmp/replica-setup.log\n",
                "# CLNGS UserData End\n",
                "# CloudFormation signal that setup is complete\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"ReplicaSetPrimary1 setup complete\" '", { "Ref" : "WaitHandleP1" }, "'\n"
                ] ] } }
            }
        },

        "MongoVolume1P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_1" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume1P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume2P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_2" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume2P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume3P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_3" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume3P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume4P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_4" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume4P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume5P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_5" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume5P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume6P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_6" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume6P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume7P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_7" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume7P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume8P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_8" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume8P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume9P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_9" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume9P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume10P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "VolumeType": {"Fn::FindInMap" : [ "VolumeTypeKeys", { "Ref" : "VolumeType" }, "Key" ]},
                "Iops": { "Ref": "IopsPerVolume" },
                "Tags" : [
                    { "Key" : "Name", "Value" : "Mongo_P1_Volume_10" },
                    { "Key" : "InstanceId", "Value" : "ReplicaSetPrimary1" },
                    { "Key" : "VolumeId", "Value" : "MongoVolume10P1" }
                ],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "AvailabilityZone" ]}
            }
        },

        "MongoVolumeMount1P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume1P1" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoVolumeMount2P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume2P1" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoVolumeMount3P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume3P1" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoVolumeMount4P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume4P1" },
                "Device" : "/dev/sdh4"
            }
        },

        "MongoVolumeMount5P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume5P1" },
                "Device" : "/dev/sdh5"
            }
        },

        "MongoVolumeMount6P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume6P1" },
                "Device" : "/dev/sdh6"
            }
        },

        "MongoVolumeMount7P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume7P1" },
                "Device" : "/dev/sdh7"
            }
        },

        "MongoVolumeMount8P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume8P1" },
                "Device" : "/dev/sdh8"
            }
        },

        "MongoVolumeMount9P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume9P1" },
                "Device" : "/dev/sdh9"
            }
        },

        "MongoVolumeMount10P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "ReplicaSetPrimary1" },
                "VolumeId" : { "Ref" : "MongoVolume10P1" },
                "Device" : "/dev/sdh10"
            }
        },

        "WaitHandleP1" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionP1" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "ReplicaSetPrimary1",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleP1" },
                "Timeout" : "600"
            }
        }
    },

    "Outputs" : {
        "ReplicaSetMemberName" : {
            "Value" : { "Fn::GetAtt" : [ "ReplicaSetPrimary1", "PublicDnsName" ] },
            "Description" : "Public DNS name of the MongoDB Replica Set endpoint (node 1 : PRIMARY)"
        }
    }
}
