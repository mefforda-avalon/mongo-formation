{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Message Service Stack 20140603-01",

    "Parameters" : {
        "KeyName" : {
            "Description" :"Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String"
        },

        "ClusterName" : {
            "Description" :"Name of this MessageService Cluster",
            "Type" : "String",
            "Default": "MessageService"
        },

        "InstanceType" : {
            "Type" : "String",
            "Description" : "EC2 instance type (e.g. m3.large, m3.xlarge, m3.xlarge)",
            "Default" : "m3.medium",
            "AllowedValues" : [ "m3.medium", "m3.large", "m3.xlarge", "m3.xlarge", "m3.2xlarge", "m3.4xlarge", "c1.xlarge", "cc1.4xlarge" ]
        },

        "SecurityGroupId" : {
            "Description" : "Security group id (sg-3d31fc58)",
            "Type" : "String",
            "Default" : "sg-3d31fc58"
        },

        "NodeJSVersion" : {
            "Description" : "NodeJS Version",
            "Type" : "String",
            "Default" : "0.10.28"
        },

        "DAPIUser" : {
            "Description" : "User under which to install DAPI-MessageService",
            "Type" : "String",
            "Default" : "ec2-user"
        },

        "GitHubSshPublicKey" : {
            "Description" : "Public Key to access JHT Github",
            "Type" : "String"
        },

        "GitHubSshPrivateKey" : {
            "Description" : "Private Key to access JHT Github",
            "Type" : "String"
        },

        "DAPITemplates" : {
            "Description" : "S3 Bucket containing the DAPI CloudFormation Templates",
            "Type" : "String",
            "Default" : "dapi-template"
        },

        "S3BucketName" : {
            "Description" : "Primary Mongo Host name",
            "Type" : "String",
            "Default" : "dapi-workoutsnapshots"
        },

        "MongoDbName" : {
            "Description" : "Mongo Database Name",
            "Type" : "String",
            "Default" : "dapi"
        },

        "SnapshotCollection" : {
            "Description" : "Mongo Workout Snapshot Collection Name",
            "Type" : "String",
            "Default" : "workout_snapshots"
        },

        "BinaryMessageCollection" : {
            "Description" : "Mongo Binary Message Collection Name",
            "Type" : "String",
            "Default" : "dapi_raw"
        },

        "MongoHost" : {
            "Description" : "Primary Mongo Host name",
            "Type" : "String"
        }

    },

    "Mappings" : {
        "InstanceTypeArch" : {
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"     : { "64" : "ami-fb8e9292", "64HVM" : "ami-978d91fe" },
            "us-west-2"     : { "64" : "ami-043a5034", "64HVM" : "ami-383a5008" },
            "us-west-1"     : { "64" : "ami-7aba833f", "64HVM" : "ami-5aba831f" },
            "eu-west-1"     : { "64" : "ami-2918e35e", "64HVM" : "ami-4b18e33c" },
            "ap-southeast-1": { "64" : "ami-b40d5ee6", "64HVM" : "ami-860d5ed4" },
            "ap-southeast-2": { "64" : "ami-c9562fc8", "64HVM" : "ami-bb562fba" },
            "ap-northeast-1": { "64" : "ami-3b4bd301", "64HVM" : "ami-cf4ad2f5" },
            "sa-east-1"     : { "64" : "ami-215dff3c", "64HVM" : "ami-635dff7e" }
        },

        "RegionZone" : {
            "us-east-1"     : {"AZ1" : "us-east-1a", "AZ2" : "us-east-1b", "AZ3" : "us-east-1b", "AZ4" : "us-east-1d", "AZ5" : "us-east-1e"},
            "us-west-1"     : {"AZ1" : "us-west-1a", "AZ2" : "us-west-1b", "AZ3" : "us-west-1c"},
            "us-west-2"     : {"AZ1" : "us-west-2a", "AZ2" : "us-west-2b", "AZ3" : "us-west-2c"},
            "eu-west-1"     : {"AZ1" : "eu-west-1a", "AZ2" : "eu-west-1b", "AZ3" : "eu-west-1c"},
            "ap-southeast-1": {"AZ1" : "ap-southeast-1a", "AZ2" : "ap-southeast-1b"},
            "ap-southeast-2": {"AZ1" : "ap-southeast-2a", "AZ2" : "ap-southeast-2b"},
            "ap-northeast-1": {"AZ1" : "ap-northeast-1a", "AZ2" : "ap-northeast-1b"},
            "sa-east-1"     : {"AZ1" : "sa-east-1a", "AZ2" : "sa-east-1b"}
        }
    },

    "Resources" : {
        "MessageServiceGroup" : {
            "Type" : "AWS::IAM::Group",
            "Properties" : {
                "Path" : "/"
            }
        },
        "MessageServiceGroupPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "MessageServiceGroupPolicy",
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement" : [ 
                        {
                            "Effect" : "Allow",
                            "Action" : [ "s3:*" ],
                            "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3BucketName" } ] ] }
                        }, 
                        {
                            "Effect" : "Allow",
                            "Action" : [ "s3:*" ],
                            "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3BucketName" } , "/*" ] ] }
                        }, 
                        {
                            "Effect" : "Allow",
                            "Action" : [ "s3:GetObject", "s3:ListBucket" ],
                            "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "DAPITemplates" } ] ] }
                        }, 
                        {
                            "Effect" : "Allow",
                            "Action" : [ "s3:GetObject", "s3:ListBucket" ],
                            "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "DAPITemplates" } ,"/*"] ] }
                        } 
                    ]
                },
                "Groups" : [ { "Ref" : "MessageServiceGroup" } ]
            }
        },

        "MessageServiceNode1" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL": { "Fn::Join": ["", ["http://" , { "Ref" : "DAPITemplates" }, ".s3.amazonaws.com/MessageServiceNode.cftemplate"]]},
                "Parameters" : {
                    "KeyName"                    : { "Ref" : "KeyName" },
                    "ServerName"                 : { "Fn::Join": ["", [{"Ref" : "ClusterName" },"Node1"]]},
                    "InstanceType"               : { "Ref" : "InstanceType" },
                    "InstanceZone"               : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ1"] },
                    "SecurityGroupId"            : { "Ref" : "SecurityGroupId" },
                    "NodeJSVersion"              : { "Ref" : "NodeJSVersion" },
                    "DAPIUser"                   : { "Ref" : "DAPIUser" },
                    "GitHubSshPublicKey"         : { "Ref" : "GitHubSshPublicKey" },
                    "GitHubSshPrivateKey"        : { "Ref" : "GitHubSshPrivateKey" },
                    "S3BucketName"               : { "Ref" : "S3BucketName" },
                    "MongoDbName"                : { "Ref" : "MongoDbName" },
                    "SnapshotCollection"         : { "Ref" : "SnapshotCollection" },
                    "BinaryMessageCollection"    : { "Ref" : "BinaryMessageCollection" },
                    "MessageServiceGroup"        : { "Ref" : "MessageServiceGroup" },
                    "MongoHost"                  : { "Ref" : "MongoHost" }
                }
            }
        },

        "MessageServiceNode2" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL": { "Fn::Join": ["", ["http://" , { "Ref" : "DAPITemplates" }, ".s3.amazonaws.com/MessageServiceNode.cftemplate"]]},
                "Parameters" : {
                    "KeyName"                    : { "Ref" : "KeyName" },
                    "ServerName"                 : { "Fn::Join": ["", [{"Ref" : "ClusterName" },"Node2"]]},
                    "InstanceType"               : { "Ref" : "InstanceType" },
                    "InstanceZone"               : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ2"] },
                    "SecurityGroupId"            : { "Ref" : "SecurityGroupId" },
                    "NodeJSVersion"              : { "Ref" : "NodeJSVersion" },
                    "DAPIUser"                   : { "Ref" : "DAPIUser" },
                    "GitHubSshPublicKey"         : { "Ref" : "GitHubSshPublicKey" },
                    "GitHubSshPrivateKey"        : { "Ref" : "GitHubSshPrivateKey" },
                    "S3BucketName"               : { "Ref" : "S3BucketName" },
                    "MongoDbName"                : { "Ref" : "MongoDbName" },
                    "SnapshotCollection"         : { "Ref" : "SnapshotCollection" },
                    "BinaryMessageCollection"    : { "Ref" : "BinaryMessageCollection" },
                    "MessageServiceGroup"        : { "Ref" : "MessageServiceGroup" },
                    "MongoHost"                  : { "Ref" : "MongoHost" }
                }
            }
        },
        "ElasticLoadBalancer": {
            "DependsOn": [
                 "MessageServiceNode1",
                 "MessageServiceNode2"
            ],
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones" : { "Fn::GetAZs" : "" },
                "HealthCheck": {
                    "Target": "HTTP:8000/health",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5",
                    "Interval": "10",
                    "Timeout": "5"
                },
                "Instances": [
                    { "Fn::GetAtt" : ["MessageServiceNode1", "Outputs.MessageServiceId" ]},
                    { "Fn::GetAtt" : ["MessageServiceNode2", "Outputs.MessageServiceId" ]}
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "8000",
                        "InstancePort": "8000",
                        "Protocol": "HTTP"
                    }
                ]
            }
        }
    },

    "Outputs" : {
        "MessageService1" : {
            "Value" : { "Fn::GetAtt" : [ "MessageServiceNode1", "Outputs.MessageServiceName" ] },
            "Description" : "Public DNS name of the MessageService1 endpoint (node 1)"
        },
        "MessageService2" : {
            "Value" : { "Fn::GetAtt" : [ "MessageServiceNode2", "Outputs.MessageServiceName" ] },
            "Description" : "Public DNS name of the MessageService2 endpoint (node 2)"
        },
        "CanonicalHostedZoneName" : {
            "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "CanonicalHostedZoneName" ] },
            "Description" : "The name of the Amazon Route 53 hosted zone that is associated with the load balancer."
        },
        "CanonicalHostedZoneNameID" : {
            "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "CanonicalHostedZoneNameID" ] },
            "Description" : "The ID of the Amazon Route 53 hosted zone that is associated with the load balancer."
        },
        "LoadBalancerDNSName" : {
            "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ] },
            "Description" : "The DNS name for the load balancer."
        }
    }
}

