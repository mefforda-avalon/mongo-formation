{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "MongoDB Replica Node 20130621-01",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String"
        },

        "ServerName" : {
            "Description" : "Name of this MessageServiceNode",
            "Type" : "String",
            "Default" : "MessageServiceNodeX"
        },

        "InstanceType" : {
            "Type" : "String",
            "Default" : "m3.medium",
            "AllowedValues" : [ "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m3.4xlarge", "c2.xlarge", "cc1.4xlarge" ],
            "Description" : "EC2 instance type (e.g. m3.large, m3.xlarge, m3.xlarge)"
        },

        "AccessKeyId" : {
            "Description" : "Access Key ID",
            "Type" : "String"
        },

        "SecretAccessKey" : {
            "Description" : "Secret Access Key for the specified Access Key ID",
            "Type" : "String"
        },

        "SecurityGroupName" : {
            "Description" : "MongoDB replica set security group name",
            "Type" : "String"
        },

        "NodeJSVersion" : {
            "Description" : "NodeJS Version",
            "Type" : "String",
            "Default" : "0.10.28"
        },

        "DAPIUser" : {
            "Description" : "User under which to install DAPI-MessageService",
            "Type" : "String",
            "Default" : "ec2-user"
        },

        "GitHubSshPublicKey" : {
            "Description" : "Public Key to access JHT Github",
            "Type" : "String"
        },

        "GitHubSshPrivateKey" : {
            "Description" : "Private Key to access JHT Github",
            "Type" : "String"
        },

        "InstanceZone" : {
            "Description" : "AvailabilityZone for this instance",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "InstanceTypeArch" : {
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"     : { "64" : "ami-fb8e9292", "64HVM" : "ami-978d91fe" },
            "us-west-2"     : { "64" : "ami-043a5034", "64HVM" : "ami-383a5008" },
            "us-west-1"     : { "64" : "ami-7aba833f", "64HVM" : "ami-5aba831f" },
            "eu-west-1"     : { "64" : "ami-2918e35e", "64HVM" : "ami-4b18e33c" },
            "ap-southeast-1": { "64" : "ami-b40d5ee6", "64HVM" : "ami-860d5ed4" },
            "ap-southeast-2": { "64" : "ami-c9562fc8", "64HVM" : "ami-bb562fba" },
            "ap-northeast-1": { "64" : "ami-3b4bd301", "64HVM" : "ami-cf4ad2f5" },
            "sa-east-1"     : { "64" : "ami-215dff3c", "64HVM" : "ami-635dff7e" }
        }
    },

    "Resources" : {

        "MessageServiceInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "sysstat" : [],
                                "ntp" : [],
                                "git" : []
                            }
                        },
                        "files" : {
                            "/root/.ssh/jht-github.pub" : {
                                "content" : { "Ref": "GitHubSshPublicKey" },
                                "mode" : "000600",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/root/.ssh/jht-github" : {
                                "content" : { "Ref": "GitHubSshPrivateKey" },
                                "mode" : "000600",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/flume/conf/flume.conf" : {
                                "content" : { "Fn::Join" : ["", [
                                    "# Tell agent1 which ones we want to activate.\n",
                                    "agent1.channels = bin-channel json-channel\n",
                                    "agent1.sources = thrift-json-source thrift-bin-source\n",
                                    "agent1.sinks = s3Sink mongo-sink\n",
                                    "\n",
                                    "agent1.channels.bin-channel.type = memory\n",
                                    "agent1.channels.bin-channel.capacity = 100000\n",
                                    "agent1.channels.bin-channel.transactionCapacity = 800\n",
                                    "agent1.channels.bin-channel.keep-alive = 3\n",
                                    "\n",
                                    "agent1.channels.json-channel.type = memory\n",
                                    "agent1.channels.json-channel.capacity = 100000\n",
                                    "agent1.channels.json-channel.transactionCapacity = 800\n",
                                    "agent1.channels.json-channel.keep-alive = 3\n",
                                    "\n",
                                    "\n",
                                    "agent1.sources.thrift-bin-source.type = thrift\n",
                                    "agent1.sources.thrift-bin-source.channels = bin-channel\n",
                                    "agent1.sources.thrift-bin-source.bind = 0.0.0.0\n",
                                    "agent1.sources.thrift-bin-source.port = 51515\n",
                                    "agent1.sources.thrift-bin-source.threads = 10\n",
                                    "agent1.sources.thrift-bin-source.interceptors = timestamp1 host1\n",
                                    "agent1.sources.thrift-bin-source.interceptors.timestamp1.type = timestamp\n",
                                    "agent1.sources.thrift-bin-source.interceptors.timestamp1.preserveExisting = true\n",
                                    "agent1.sources.thrift-bin-source.interceptors.host1.type = host\n",
                                    "agent1.sources.thrift-bin-source.interceptors.host1.hostHeader = hostname\n",
                                    "agent1.sources.thrift-bin-source.interceptors.host1.preserveExisting = true\n",
                                    "\n",
                                    "agent1.sources.thrift-json-source.type = thrift\n",
                                    "agent1.sources.thrift-json-source.channels = json-channel\n",
                                    "agent1.sources.thrift-json-source.bind = 0.0.0.0\n",
                                    "agent1.sources.thrift-json-source.port = 31313\n",
                                    "agent1.sources.thrift-json-source.threads = 10\n",
                                    "agent1.sources.thrift-json-source.interceptors = timestamp1 host1\n",
                                    "agent1.sources.thrift-json-source.interceptors.timestamp1.type = timestamp\n",
                                    "agent1.sources.thrift-json-source.interceptors.timestamp1.preserveExisting = true\n",
                                    "agent1.sources.thrift-json-source.interceptors.host1.type = host\n",
                                    "agent1.sources.thrift-json-source.interceptors.host1.hostHeader = hostname\n",
                                    "agent1.sources.thrift-json-source.interceptors.host1.preserveExisting = true\n",
                                    "\n",
                                    "agent1.sinks.s3Sink.type = hdfs\n",
                                    "#Specify the channel the sink should use\n",
                                    "agent1.sinks.s3Sink.channel = bin-channel\n",
                                    "#Name prefixed to files\n",
                                    "agent1.sinks.s3Sink.hdfs.filePrefix = WorkoutSnapshots\n",
                                    "#Number of seconds to wait before rolling\n",
                                    "agent1.sinks.s3Sink.hdfs.rollInterval = 600\n",
                                    "#Timeout after which inactive files get closed\n",
                                    "#This corresponds to the roundValue below to avoid .tmp files\n",
                                    "agent1.sinks.s3Sink.hdfs.idleTimeout = 900\n",
                                    "#File size to trigger roll in bytes\n",
                                    "#Currently this is 256MB a good MapReduce number\n",
                                    "agent1.sinks.s3Sink.hdfs.rollSize = 268435456\n",
                                    "#Number of events to trigger a roll\n",
                                    "agent1.sinks.s3Sink.hdfs.rollCount = 100000\n",
                                    "#File Format SequenceFile, DataStream or CompressedStream\n",
                                    "#(1)DataStream will not comress\n",
                                    "#(2)CompressedStream requires hdfs.codeC set\n",
                                    "agent1.sinks.s3Sink.hdfs.fileType = DataStream\n",
                                    "#HDFS Write Format Text or Writable(default)\n",
                                    "agent1.sinks.s3Sink.hdfs.writeFormat = Text\n",
                                    "agent1.sinks.s3Sink.hdfs.path = s3n://",
                                    { "Ref" : "AccessKeyId" },":",{"Ref": "SecretAccessKey" },
                                    "@dapi-workoutsnapshots/%Y-%m-%d/%H%M\n",
                                    "#Make S3 files in 15 minute buckets\n",
                                    "# Should the timestamp be rounded down (if true, affects all time based escape sequences except %t)\n",
                                    "agent1.sinks.s3Sink.hdfs.round = true\n",
                                    "# Rounded down to the highest multiple of this (in the unit configured using hdfs.roundUnit), less than current time.\n",
                                    "agent1.sinks.s3Sink.hdfs.roundValue = 15\n",
                                    "# The unit of the round down value - second, minute or hour.\n",
                                    "agent1.sinks.s3Sink.hdfs.roundUnit = minute\n",
                                    "\n",
                                    "\n",
                                    "agent1.sinks.mongo-sink.type = org.riderzen.flume.sink.MongoSink\n",
                                    "agent1.sinks.mongo-sink.host = mongo-test\n",
                                    "agent1.sinks.mongo-sink.port = 27017\n",
                                    "agent1.sinks.mongo-sink.model = single\n",
                                    "agent1.sinks.mongo-sink.collection = TestCollection\n",
                                    "agent1.sinks.mongo-sink.batch = 100\n",
                                    "agent1.sinks.mongo-sink.channel = json-channel\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "ntpd"    : { "enabled" : "true", "ensureRunning" : "true" }
                             }
                        }
                    }
                }
            },

            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { 
                    "Fn::FindInMap" : [
                         "RegionImageZone", { "Ref" : "AWS::Region" },
                        {
                            "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ]
                        }
                    ]
                },
                "Tags" : [
                    { "Key" : "Name", "Value" : { "Ref" : "ServerName" } },
                    { "Key" : "Type", "Value" : "MessageService" }
                ],
                "SecurityGroups" : [ { "Ref" : "SecurityGroupName" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "AvailabilityZone" : {"Ref" : "InstanceZone" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "#\n",
                    "# Sending all output to /tmp/install.log\n",
                    "#\n",
                    "exec 2> /tmp/install.log\n",
                    "exec >> /tmp/install.log\n",
                    "#\n",
                    "# Updating CloudFormation scripts\n",
                    "#\n",
                    "yum update -y aws-cfn-bootstrap\n",

                    "## Initialize CloudFormation bits\n",
                    "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MessageServiceInstance",
                    "   --access-key ",  { "Ref" : "AccessKeyId" },
                    "   --secret-key ", {"Ref": "SecretAccessKey" },
                    "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",
                    "#\n",


                    "## Updating RPMs and Installing MongoDB\n",
                    "## Update RPMs\n",
                    "#\n",
                    "yum update -y\n",


                    "## Install Node.JS\n",
                    "#yum install nodejs -enablerepo=epel -y\n",
                    "cd /usr/local/src\n",
                    "wget http://nodejs.org/dist/",{"Ref": "NodeJSVersion"},"/node-v",{"Ref": "NodeJSVersion"},"-linux-x64.tar.gz\n",
                    "tar -xzvf node-v",{"Ref": "NodeJSVersion"},"-linux-x64.tar.gz\n",
                    "cd node-v",{"Ref": "NodeJSVersion"},"-linux-x64\n",
                    "mv include/node /usr/local/include/\n",
                    "mv lib/node_modules /usr/local/lib/\n",
                    "mv share/man/man1/node.1 /usr/local/share/man/man1/\n",
                    "mv bin/* /usr/local/bin/\n",

                    "## Install Flume\n",
                    "cd /etc/yum.repos.d\n",
                    "wget http://archive.cloudera.com/cdh4/redhat/6/x86_64/cdh/cloudera-cdh4.repo\n",
                    "yum install flume-ng-agent\n",
                    "## Updating system config and starting Flume-NG-Agent\n",
                    "#\n",
                    "chkconfig flume-ng-agent on\n",
                    "service flume-ng-agent start\n",

                    "## Install Thrift from source\n",
                    "#\n",
                    "yum install automake libtool flex bison pkgconfig gcc-c++ \\\n",
                    "\tboost-devel libevent-devel zlib-devel python-devel \\\n",
                    "\topenssl-devel ruby-devel lua-devel\n",
                    "\n",
                    "cd /usr/local/src\n",
                    "git clone https://git-wip-us.apache.org/repos/asf/thrift.git\n",
                    "cd thrift\n",
                    "./bootstrap.sh\n",
                    "./configure --with-lua=no\n",
                    "make\n",
                    "make install\n",
                    "#Install thrift Node.JS libs\n",
                    "cp -rp lib/nodejs/lib/thrift /usr/local/lib/node_modules/\n",

                    "## Install DAPI-MessageService\n",

                    "#Install mocha globally\n",
                    "npm install -g mocha\n",

                    "#Install jscoverage from source\n",
                    "cd /usr/local/src\n",
                    "wget http://siliconforks.com/jscoverage/download/jscoverage-0.5.tar.bz2\n",
                    "tar -xvf jscoverage-0.5.tar.bz2\n",
                    "cd jscoverage-0.5\n",
                    "./configure\n",
                    "make\n",
                    "make install\n",
                    "\n",

                    "#Installing DAPI-MessageService from git\n",
                    "#The following instructions should be performed as the user you intend to use in operating the message service.\n",
                    "\n",
                    "if [ ! -d '/home/", { "Ref": "DAPIUser" }, "' ];then useradd ", { "Ref": "DAPIUser" }, ";fi\n",
                    "cd /home/", { "Ref": "DAPIUser" }, "\n",
                    "git clone git@github.com:chad-jht/DAPI-MessageService.git\n",
                    "cd DAPI-MessageService\n",
                    "#Ideally you could run this and it would take care of the flume-logger block\n",
                    "#but because of the issues with thrift that can't happen yet.\n",
                    "#npm install\n",
                    "\n",
                    "#Installing flume-logger from git\n",
                    "#This is unfortunately more complex than it would otherwise be, because of the thrift complications.\n",
                    "#This process can be simplified once thrift versions are updated to include the TCompactProtocol\n",
                    "# as mentioned previously.\n",
                    "\n",
                    "cd node_modules\n",
                    "GIT_SSH='ssh -i /root/.ssh/jht-github' git clone git@github.com:chad-jht/flume-logger.git\n",
                    "cd flume-logger\n",
                    "mkdir node_modules\n",
                    "cp -rp /usr/local/lib/node_modules/thrift node_modules\n",
                    "npm install q\n",
                    "npm install node-int64\n",
                    "chown -R ", { "Ref": "DAPIUser" }, ":", { "Ref": "DAPIUser" }, " /home/", { "Ref": "DAPIUser" }, "\n"
                ]]}}
            }
        }
    },

    "Outputs" : {
        "MessageServiceName" : {
            "Value" : { "Fn::GetAtt" : [ "MessageServiceInstance", "PublicDnsName" ] },
            "Description" : "public DNS name of the DAPI-MesssageService Instance"
        }
    }
}
